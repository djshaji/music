/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { sdp: peg$parsesdp },
      peg$startRuleFunction  = peg$parsesdp,

      peg$c0 = function(line) {return line;},
      peg$c1 = function(line, line2) {return line2;},
      peg$c2 = function(line, lines) {
      		lines.splice(0, 0, line);
      		var sdp = aggregate(lines);
      		return sdp;
      	},
      peg$c3 = /^[\r\n]/,
      peg$c4 = peg$classExpectation(["\r", "\n"], false, false),
      peg$c5 = /^[ \t]/,
      peg$c6 = peg$classExpectation([" ", "\t"], false, false),
      peg$c7 = "=",
      peg$c8 = peg$literalExpectation("=", false),
      peg$c9 = function(n) { return n; },
      peg$c10 = /^[\-0-9]/,
      peg$c11 = peg$classExpectation(["-", ["0", "9"]], false, false),
      peg$c12 = function(n) { return guessType(text()); },
      peg$c13 = /^[^ \t\n\r]/,
      peg$c14 = peg$classExpectation([" ", "\t", "\n", "\r"], true, false),
      peg$c15 = function(s) { return text();},
      peg$c16 = "v",
      peg$c17 = peg$literalExpectation("v", false),
      peg$c18 = function(v) { return {version: v}; },
      peg$c19 = function(t) { return options.useUnixTimes ? t - NTP_OFFSET : t;},
      peg$c20 = "d",
      peg$c21 = peg$literalExpectation("d", false),
      peg$c22 = "h",
      peg$c23 = peg$literalExpectation("h", false),
      peg$c24 = "m",
      peg$c25 = peg$literalExpectation("m", false),
      peg$c26 = "s",
      peg$c27 = peg$literalExpectation("s", false),
      peg$c28 = function(x, p) { return x * DURATIONS[p];},
      peg$c29 = function(x) { return x;},
      peg$c30 = "o",
      peg$c31 = peg$literalExpectation("o", false),
      peg$c32 = function(username, sessionId, sessionVersion, networkType, addressType, unicastAddress) {
      		var o = {
      				username: username,
      				sessionId: sessionId,
      				sessionVersion: sessionVersion,
      				networkType: networkType,
      				addressType: addressType,
      				unicastAddress: unicastAddress
      		};
      		var or = {};
      		or[SDP_TYPES["o"]] = o;
      		return or;
      	},
      peg$c33 = "c",
      peg$c34 = peg$literalExpectation("c", false),
      peg$c35 = function(networkType, addressType, connectionAddress) {
      		return {connection: {
      				networkType: networkType,
      				addressType: addressType,
      				connectionAddress: connectionAddress
      		}};
      	},
      peg$c36 = "/",
      peg$c37 = peg$literalExpectation("/", false),
      peg$c38 = function(type, port, n) {return n;},
      peg$c39 = /^[^ \t]/,
      peg$c40 = peg$classExpectation([" ", "\t"], true, false),
      peg$c41 = function(type, port, numberOfPorts) {return text();},
      peg$c42 = function(type, port, numberOfPorts, protocol, format) { return format;},
      peg$c43 = function(type, port, numberOfPorts, protocol, formats) {
      		var m = {
      			type: type
      			, port: port
      			, protocol: protocol
      		};
      		if (numberOfPorts) {
      			m.numberOfPorts = numberOfPorts;
      		}
      		// TODO better detection of RTP
      		if (options.parseRtpPayloads !== false && protocol.indexOf("RTP/") >= 0) {
      			m.payloads = formats;
      			m.payloads.forEach(function(value, index, arr) {
      					arr[index] = guessType(value);
      				});
      		} else {
      			m.formats = formats;
      		}
      		return {media: m};
      	},
      peg$c44 = "b",
      peg$c45 = peg$literalExpectation("b", false),
      peg$c46 = ":",
      peg$c47 = peg$literalExpectation(":", false),
      peg$c48 = function(type, value) { return {bandwidth: {type: type, value: value}}},
      peg$c49 = "t",
      peg$c50 = peg$literalExpectation("t", false),
      peg$c51 = function(start, stop) {return {timing:{start: start, stop: stop}}},
      peg$c52 = "r",
      peg$c53 = peg$literalExpectation("r", false),
      peg$c54 = function(interval, activeDuration, d) {return d;},
      peg$c55 = function(interval, activeDuration, offsets) { return {repeat: {interval: interval, activeDuration: activeDuration, offsets: offsets}}},
      peg$c56 = "z",
      peg$c57 = peg$literalExpectation("z", false),
      peg$c58 = function(t, t2) {return t2;},
      peg$c59 = function(t, ts) { return {timezones: [t].concat(ts)};},
      peg$c60 = function(adjustment, offset) {return {adjustment: adjustment, offset: offset}},
      peg$c61 = "k",
      peg$c62 = peg$literalExpectation("k", false),
      peg$c63 = /^[^:\r\n]/,
      peg$c64 = peg$classExpectation([":", "\r", "\n"], true, false),
      peg$c65 = function() {return text();},
      peg$c66 = function(method, key) { return {encryptionKey: {method: method, key: key}};},
      peg$c67 = function(method) { return {encryptionKey: {method: method}};},
      peg$c68 = "a",
      peg$c69 = peg$literalExpectation("a", false),
      peg$c70 = "rtpmap",
      peg$c71 = peg$literalExpectation("rtpmap", false),
      peg$c72 = /^[^\/]/,
      peg$c73 = peg$classExpectation(["/"], true, false),
      peg$c74 = function(payload) {return text();},
      peg$c75 = function(payload, codec, rate, params) {return guessType(params);},
      peg$c76 = function(payload, codec, rate, codecParams) {
      		var rtp = {
      				payload: payload,
      				codec: codec,
      				rate: rate
      		};
      		if (codecParams) {
      			rtp.codecParams = codecParams;
      		}
      		return {rtp: rtp};
      	},
      peg$c77 = "fmtp",
      peg$c78 = peg$literalExpectation("fmtp", false),
      peg$c79 = function(payload, params) {
      		return { fmtp: {
      				payload: payload,
      				params: params
      		}};
      	},
      peg$c80 = ";",
      peg$c81 = peg$literalExpectation(";", false),
      peg$c82 = function(param, p) {return p;},
      peg$c83 = function(param, params) {
      		if (params) {
      			params.splice(0, 0, param);
      		} else {
      			params = [param];
      		}
      		return aggregateSdpProperties(params);
      	},
      peg$c84 = /^[^\r\n]/,
      peg$c85 = peg$classExpectation(["\r", "\n"], true, false),
      peg$c86 = function(config) { return text();},
      peg$c87 = /^[^=;\r\n]/,
      peg$c88 = peg$classExpectation(["=", ";", "\r", "\n"], true, false),
      peg$c89 = function() {return text()},
      peg$c90 = /^[^;\r\n]/,
      peg$c91 = peg$classExpectation([";", "\r", "\n"], true, false),
      peg$c92 = function(name) {return guessType(text());},
      peg$c93 = function(name, value) { var param = {}; param[name] = value; return param;},
      peg$c94 = function(property) {
      		var p = {};
      		p[property] = true;
      		return p;
      	},
      peg$c95 = /^[^\n\r]/,
      peg$c96 = peg$classExpectation(["\n", "\r"], true, false),
      peg$c97 = function(property) {return guessType(text());},
      peg$c98 = function(property, value) {
      		var p = {};
      		p[property] = value;
      		return p;
      	},
      peg$c99 = /^[^\n\r:]/,
      peg$c100 = peg$classExpectation(["\n", "\r", ":"], true, false),
      peg$c101 = function() {
      		var name = text();
      		if (options["useLongNames"] !== false && SDP_TYPES[name]) {
      			return SDP_TYPES[name];
      		}
      		return name;
      	},
      peg$c102 = /^[a-z]/,
      peg$c103 = peg$classExpectation([["a", "z"]], false, false),
      peg$c104 = function(type) {return text();},
      peg$c105 = function(type, value) {
      		var t = {};
      		t[SDP_TYPES[type] ? SDP_TYPES[type] : type] = value;
      		return t;
      	},

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsesdp() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseSdpLine();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c0(s2);
    }
    s1 = s2;
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_eol();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSdpLine();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c1(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_eol();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSdpLine();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c1(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_eol();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_eol();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_eol() {
    var s0, s1;

    s0 = [];
    if (peg$c3.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c3.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$c5.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c5.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeq() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c7;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parseversionNumber() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c9(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c10.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c10.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c12(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c13.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSdpLine() {
    var s0;

    s0 = peg$parseversion();
    if (s0 === peg$FAILED) {
      s0 = peg$parseorigin();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemedia();
        if (s0 === peg$FAILED) {
          s0 = peg$parseconnection();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetiming();
            if (s0 === peg$FAILED) {
              s0 = peg$parserepeat();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetimezones();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseencryptionKey();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsebandwidth();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseattribute();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseotherType();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseversion() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 118) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseversionNumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetime() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseduration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 100) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 104) {
          s2 = peg$c22;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 109) {
            s2 = peg$c24;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 115) {
              s2 = peg$c26;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c28(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseorigin() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 111) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestr();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseversionNumber();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsestr();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestr();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsestr();
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c32(s3, s5, s7, s9, s11, s13);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconnection() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 99) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestr();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestr();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c35(s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemedia() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 109) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenumber();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s7 = peg$c36;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenumber();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c38(s3, s5, s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = [];
                  if (peg$c39.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c40); }
                  }
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      if (peg$c39.test(input.charAt(peg$currPos))) {
                        s10 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c40); }
                      }
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s8;
                    s9 = peg$c41(s3, s5, s6);
                  }
                  s8 = s9;
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$currPos;
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsestr();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s10;
                        s11 = peg$c42(s3, s5, s6, s8, s12);
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    if (s10 !== peg$FAILED) {
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$currPos;
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsestr();
                          if (s12 !== peg$FAILED) {
                            peg$savedPos = s10;
                            s11 = peg$c42(s3, s5, s6, s8, s12);
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      }
                    } else {
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c43(s3, s5, s6, s8, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebandwidth() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      s1 = peg$c44;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestr();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c46;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c48(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetiming() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      s1 = peg$c49;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetime();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetime();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserepeat() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 114) {
      s1 = peg$c52;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseduration();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseduration();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseduration();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c54(s3, s5, s9);
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseduration();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c54(s3, s5, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55(s3, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimezones() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 122) {
      s1 = peg$c56;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetimezone();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetimezone();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c58(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetimezone();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c58(s3, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c59(s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimezone() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseduration();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseencryptionKey() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 107) {
      s1 = peg$c61;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        if (peg$c63.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c63.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c65();
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c46;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c66(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 107) {
        s1 = peg$c61;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestr();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseattribute() {
    var s0;

    s0 = peg$parsertpmapAttribute();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefmtpAttribute();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevalueAttribute();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepropertyAttribute();
        }
      }
    }

    return s0;
  }

  function peg$parsertpmapAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 97) {
      s1 = peg$c68;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c70) {
          s3 = peg$c70;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c46;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenumber();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = [];
                if (peg$c72.test(input.charAt(peg$currPos))) {
                  s9 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c73); }
                }
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    if (peg$c72.test(input.charAt(peg$currPos))) {
                      s9 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c73); }
                    }
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c74(s5);
                }
                s7 = s8;
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s8 = peg$c36;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenumber();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 47) {
                        s11 = peg$c36;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsestr();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s10;
                          s11 = peg$c75(s5, s7, s9, s12);
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c76(s5, s7, s9, s10);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefmtpAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 97) {
      s1 = peg$c68;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c77) {
          s3 = peg$c77;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c46;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenumber();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseformatParameters();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c79(s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseformatParameters() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseformatParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c80;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$c5.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$c5.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseformatParameter();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c82(s1, s6);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c80;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c5.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c5.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseformatParameter();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c82(s1, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c83(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$c84.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c84.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c86(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseformatParameter() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c87.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c87.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c89();
    }
    s1 = s2;
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        if (peg$c90.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c91); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c90.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c91); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c92(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c93(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepropertyAttribute() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 97) {
      s1 = peg$c68;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseattributeName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalueAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 97) {
      s1 = peg$c68;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseattributeName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c46;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            if (peg$c95.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c96); }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c95.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c96); }
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c97(s3);
            }
            s5 = s6;
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattributeName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c99.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c99.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c100); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c101();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseotherType() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (peg$c102.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeq();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        if (peg$c84.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c84.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c104(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c105(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  var jsCommon = require("jscommon");
  var guessType = jsCommon.guessType, isInt = jsCommon.isInt;

  /** The offset of the NTP time compared to Unix time. */
  var NTP_OFFSET = 2208988800;

  var DURATIONS = { "d": 86400, "h": 3600, "m": 60, "s": 1};
  DURATIONS.FORMAT_ORDER = ["d", "h", "m"];

  /** End of line. */
  var EOL = "\r\n";

  /** The SDP types and the corresponding properties. */
  var SDP_TYPES = {
  	v: "version"
  	, o: "origin"
  	, s: "sessionName"
  	, i: "sessionDescription"
  	, u: "uri"
  	, e: "emailAddress"
  	, p: "phoneNumber"
  	, c: "connection"
  	, m: "media"
  	, b: "bandwidth"
  	, t: "timing"
  	, r: "repeat"
  	, z: "timezones"
  	, k: "encryptionKey"
  	, cat: "category"
  	, keywds: "keywords"
  	, ptime: "packetTime"
  	, maxptime: "maximumPacketTime"
  	, orient: "orientation"
  	, rtp: "rtpmap"
  	, "payloads": ""
  };

  for (var t in SDP_TYPES) {
  	if (SDP_TYPES.hasOwnProperty(t)) {
  		SDP_TYPES[SDP_TYPES[t]] = t;
  	}
  }

  var aggregateSdpProperties = function(sdpProperties) {
  	var sdp = {};
  	var obj = sdp;
  	for (var i = 0; i < sdpProperties.length; i++) {
  		for (var p in sdpProperties[i]) {
  			if (sdpProperties[i].hasOwnProperty(p)) {
  				if (options.useMediaSections !== false && p == SDP_TYPES["m"]) {
  					obj = sdp;
  				}
  				if (obj[p]) {
  					if (!obj[p].push) {
  						obj[p] = [obj[p]];
  					}
  					obj[p].push(sdpProperties[i][p]);
  				} else {
  					obj[p] = sdpProperties[i][p];
  				}
  				if (options.useMediaSections !== false && p == SDP_TYPES["m"]) {
  					obj = sdpProperties[i][p];
  				}
  			}
  		}
  	}
  	return sdp;
  };

  var aggregateSdp = function(sdpProperties) {
  	var sdp = aggregateSdpProperties(sdpProperties);
  	// ensure that media is an array
  	if (sdp.media && !sdp.media.join) {
  		sdp.media = [sdp.media];
  	}

  	// aggregate payloads in each media section
  	if (options.aggregatePayloads !== false) {
  		aggregatePayloads(sdp);
  	}
  	return sdp;
  };

  var aggregate = aggregateSdp;

  var aggregatePayloads = function(sdp) {
  	if (!sdp.media || !sdp.media.length) {
  		return sdp;
  	}
  	for (var i = 0; i < sdp.media.length; i++) {
  		var m = sdp.media[i];
  		if (!m.payloads) {
  			continue;
  		}
  		var payloads = [];
  		for (var j = 0; j < m.payloads.length; j++) {
  			var payload = {id: m.payloads[j]};
  			aggregatePayloadAttribute(payload, m, "rtp");
  			aggregatePayloadAttribute(payload, m, "fmtp");
  			payloads[j] = payload;
  		}
  		if (m.rtp) {
  			delete m.rtp;
  		}
  		if (m.fmtp) {
  			delete m.fmtp;
  		}
  		m.payloads = payloads;
  	}
  	return sdp;
  };

  var aggregatePayloadAttribute = function(payload, media, attr) {
  	if (media[attr] && !media[attr].push) {
  		media[attr] = [media[attr]];
  	}
  	if (media[attr]) {
  		payload[attr] = getPayload(media[attr], payload.id);
  	}
  	if (payload[attr]) {
  		delete payload[attr].payload;
  	} else {
  		delete payload[attr];
  	}
  };

  var getPayload = function(payloads, id) {
  	if (payloads.payload === id) {
  		return payloads;
  	}
  	for (var i = 0; i < payloads.length; i++) {
  		if (payloads[i].payload === id) {
  			return payloads[i];
  		}
  	}
  	return null;
  };

  var OUTPUT_ORDER = ["v", "o", "s", "i", "u", "e", "p", "c", "b", "t", "r", "z", "k", "a", "*", "m"];
  var MEDIA_OUTPUT_ORDER = ["i", "c", "b", "k", "rtcp", "ice-ufrag", "ice-pwd", "fingerprint", "setup", "mid", "extmap", "sendrecv", "rtcp-mux", "payloads", "ptime", "maxptime", "ssrc"];
  var getOutputOrder = function(order, property) {
  	var idx = order.indexOf(property);
  	if (idx < 0) {
  		idx = order.indexOf(SDP_TYPES[property]);
  	}
  	if (idx < 0) {
  		idx = order.indexOf("*");
  	}
  	if (idx < 0) {
  		idx = order.length;
  	}
  };

  var ordering = function(order) {
  	return function(a, b) {
  		return getOutputOrder(order, a) - getOutputOrder(order, b);
  	};
  };

  var formatSdp = function(sdp) {
  	return formatSdpSection(sdp, null, OUTPUT_ORDER);
  };

  parser.format = formatSdp;

  var formatSdpSection = function(section, excluded, order) {
  	var s = "";

  	jsCommon.forEach(section,
  			function(value, property, section) {
  				s += formatSdpProperty(section, property);
  			},
  			{
  				blacklist: excluded ? function(p) { return excluded.indexOf(p) >= 0 || excluded.indexOf(SDP_TYPES[p]) >= 0;} : null,
  				comparator: ordering(order)
  			});

  	// remove empty lines - it seems that browsers cannot deal with empty lines in SDP, even at the end
  	s = s.replace(/[\r\n]{2,}/g, EOL);
  	return s;
  };

  var formatSdpProperty = function(section, propertyName) {
  	// if the property does not exist, return empty
  	if (section[propertyName] === undefined) {
  		return "";
  	}
  	// get the prefix of the property according to SDP specs
  	var prefix = SDP_TYPES[propertyName] !== undefined ? SDP_TYPES[propertyName] : propertyName;
  	// gets the formatter for the property
  	var formatter = FORMATTERS[propertyName] || FORMATTERS[prefix] || FORMATTERS["*"];
  	// if the prefix is one single character, then it is a SDP type
  	// otherwise it is a SDP attribute
  	if (prefix.length > 1) {
  		prefix = "a=" + prefix;
  		if (section[propertyName] === false) {
  			return "";
  		}
  		if (section[propertyName] === true) {
  			return prefix + EOL;
  		}
  		prefix += ":";
  	} else if (prefix.length > 0) {
  		prefix += "=";
  	}

  	if (propertyName !== "timezones" && section[propertyName].push) {
  		var s = "";
  		for (var i = 0; i < section[propertyName].length; i++) {
  			s += prefix + formatter(section[propertyName][i], section[propertyName]) + (prefix.length ? EOL : "");
  		}
  		return s;
  	}
  	return prefix + formatter(section[propertyName], section) + (prefix.length ? EOL : "");
  };

  // A formatter for each SDP property or attribute. The default one is "*"
  // A formatter is a function that receives the property value and the section
  var FORMATTERS = {
  "*": function(value) {
  	return value.toString();
  }
  , origin: function(origin) {
  	return origin.username + " " + origin.sessionId
  			+ " " + origin.sessionVersion
  			+ " " + origin.networkType
  			+ " " + origin.addressType
  			+ " " + origin.unicastAddress;
  }
  , timing: function(timing) {
  	return timing.start + " " + timing.stop;
  }
  , duration: function(duration) {
  	if (duration === 0) {
  		return duration;
  	}
  	for (var i = 0, n = DURATIONS.FORMAT_ORDER.length; i < n; i++) {
  		var x = duration / DURATIONS[DURATIONS.FORMAT_ORDER[i]];
  		if (isInt(x)) {
  			return x + DURATIONS.FORMAT_ORDER[i];
  		}
  	}
  	return duration;
  }
  , repeat: function(repeat) {
  	var s = FORMATTERS.duration(repeat.interval) + " " + FORMATTERS.duration(repeat.activeDuration);
  	for (var i = 0, n = repeat.offsets.length; i < n; i++) {
  		s +=  " " + FORMATTERS.duration(repeat.offsets[i]);
  	}
  	return s;
  }
  , timezones: function(timezones) {
  	var s = "";
  	for (var i = 0, n = timezones.length; i < n; i++) {
  		s += (i > 0 ? " " : "") + timezones[i].adjustment + " " + FORMATTERS.duration(timezones[i].offset);
  	}
  	return s;
  }
  , encryptionKey: function(encryptionKey) {
  	return encryptionKey.method + (encryptionKey.key ? ":" + encryptionKey.key : "");
  }
  , media: function(media) {
  	var s = media.type
  			+ " " + media.port
  			+ (media.numberOfPorts ? "/" + media.numberOfPorts : "")
  			+ " " + media.protocol;
  	if (media.formats) {
  		s += " " + media.formats.join(" ") + EOL;
  	}
  	if (media.payloads) {
  		for (var i = 0; i < media.payloads.length; i++) {
  			s += " " + media.payloads[i].id;
  		}
  		s += EOL;
  	}
  	s += formatSdpSection(media, ["type", "port", "protocol", "numberOfPorts", "formats"], MEDIA_OUTPUT_ORDER);
  	return s;
  }
  , payloads: function(payload) {
  	return formatSdpSection(payload, ["id"], ["rtp", "fmtp"]);
  }
  , rtpmap: function(rtp, parent) {
  	var s = parent.id + " " + rtp.codec + "/" + rtp.rate;
  	if (rtp.codecParams) {
  		s += "/" + rtp.codecParams;
  	}
  	return s;
  }
  , fmtp: function(fmtp, parent) {
  	var s = parent.id + " ";
  	if (fmtp.params.split) {
  		s += fmtp.params;
  	} else {
  		var i = 0;
  		for (var p in fmtp.params) {
  			if (fmtp.params.hasOwnProperty(p)) {
  				s += (++i === 1 ? "" : "; ") + p + "=" + fmtp.params[p];
  			}
  		}
  	}
  	return s;
  }
  , connection: function(connection) {
  	return connection.networkType
  			+ " " + connection.addressType
  			+ " " + connection.connectionAddress;
  }
  };



  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
